syntax = "proto3";
package storyblock.storyblock;

import "gogoproto/gogo.proto";
import "storyblock/book.proto";
import "storyblock/story.proto";
import "storyblock/vote.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "storyblock/params.proto";
// this line is used by starport scaffolding # 1

option go_package = "storyblock/x/storyblock/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/storyblock/storyblock/params";
  }
  // Queries a list of Books items.
	rpc Books(QueryBooksRequest) returns (QueryBooksResponse) {
		option (google.api.http).get = "/storyblock/storyblock/books";
	}

// Queries a list of Stories items.
	rpc Stories(QueryStoriesRequest) returns (QueryStoriesResponse) {
		option (google.api.http).get = "/storyblock/storyblock/stories";
	}

// Queries a list of Votes items.
	rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
		option (google.api.http).get = "/storyblock/storyblock/votes";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryBooksRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryBooksResponse {
  repeated Book Book = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryStoriesRequest {
  string bookId = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryStoriesResponse {
  Book book = 1;
  repeated Story Story = 2;
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

message QueryVotesRequest {
  string bookId = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryVotesResponse {
  Book book = 1;
  repeated Vote Vote = 2;
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

// this line is used by starport scaffolding # 3
